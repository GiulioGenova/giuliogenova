---
title: Reading Assets from Google Earth Engine with GDAL and R {terra}
description: A guide on how to directly read assets from Google Earth Engine 
categories: [GEE, GDAL, R, terra]
author: Giulio Genova
date: today
image: https://earthengine.google.com/static/images/earth-engine-logo.png
order: 1
---

![](DALLÂ·E 2024-01-14 16.48.53 - The image depicts a wide-angle view of a computer setup with a large monitor displaying a complex spatial layer, similar to those seen in Google Earth.png)

# Intro and Aim

Google Earth Engine (GEE) stores petabytes of Earth Observation data and more. The great aspect is that you can perform analyses directly in the cloud. This means that, in principle, you only need to extract your results (summary statistics, plots, final maps, etc.) from GEE. However, there are times when you want to conduct part of your analysis using your own system. For these instances, accessing (or downloading) raw or preprocessed data from GEE becomes necessary.

Recently, [XEE](https://github.com/google/Xee) emerged as a potential game-changer. But there's another, perhaps overlooked, method for accessing GEE data directly from your machine: using GDAL and any software built on it, like the R {terra} package.

I was inspired by [Andrew Brown's blog post](https://humus.rocks/post/2022/06/23/using-the-terra-r-package-to-view-download-and-analyze-google-earth-engine-images/) and decided to try it out myself.

# Stack Requirements

Ensure you have the following:

- [GEE account (and a connected Google Cloud project, created with your GEE account)](https://code.earthengine.google.com/)
- [GDAL](https://gdal.org/download.html)
- [R](https://www.r-project.org/) and the [{terra} package](https://cran.r-project.org/web/packages/terra/index.html)

# Setup

Follow these steps to access GEE data from your machine:

1. Go to https://console.cloud.google.com/
2. Select the cloud project you use with Google Earth Engine.
3. Navigate to APIs and Services and enable the Google Earth Engine API.
4. Create a service account.
5. Generate a credentials .json file and save it on your machine.

# GDAL (on Linux)

With everything set up, we can access the data. GDAL, as a command-line tool, is both convenient and powerful.

I chose the DEM [Merit](https://developers.google.com/earth-engine/datasets/catalog/MERIT_DEM_v1_0_3) dataset for this example. It's a single, global image with one band ("dem"), simplifying the process for demonstration purposes.

First, I create an environment variable with the location of my credentials file.

Then, I use `gdalinfo` on the dataset location, adding the "EEDAI:" prefix. This tells GDAL that the dataset is stored on Google Earth Engine and to use the appropriate protocol.

```{bash}
export GOOGLE_APPLICATION_CREDENTIALS="$HOME/gee/ee-credentials.json"
gdalinfo EEDAI:MERIT/DEM/v1_0_3
```

With this, you'll get information about the dataset.

Once confirmed it's working, you can use other GDAL tools like `gdalwarp`, `gdal_translate`, etc.

# R Terra
{terra} uses GDAL to read raster data, meaning the same dataset can be read into R just as we did with GDAL.

Similar to the GDAL example, we set an environment variable for the credentials file and then read the dataset (with "EEDAI:") using the `rast()` function.

```{r}
library(terra)
Sys.setenv(GOOGLE_APPLICATION_CREDENTIALS=file.path(path.expand('~'),"gee/ee-credentials.json"))

rst <- rast("EEDAI:MERIT/DEM/v1_0_3")
```

Now, the asset can be accessed with all the functions available in {terra}. We can print the object and plot it. Plotting is fast, even for a global layer at 90 meters resolution, because terra only retrieves a sample of it, just enough to provide a clear image at the needed resolution.

```{r}
print(rst)
plot(rst, range=c(0,5000)) # wide range for global DEM
```

Next, we select a spatial subset using the `window()` function by defining a bounding box.

```{r}
xmin = 28 # bounding box xmin
xmax = 29 # bounding box xmax
ymin = -3 # bounding box ymin
ymax = -2 # bounding box ymax

bb = ext(c(xmin, xmax, ymin, ymax))
window(rst) <- NULL
window(rst) = bb
print(rst)
```

We can now obtain summary statistics from the area with the `summary()` function.

```{r}
summary(rst)
```

Finally, plot the area with an appropriate value range.

```{r}
plot(rst, range=c(650,3500))
```
