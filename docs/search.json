[
  {
    "objectID": "projects/community/bolzanor/index.html",
    "href": "projects/community/bolzanor/index.html",
    "title": "BolzanoR",
    "section": "",
    "text": "BolzanoR Website Home Page\n\n\nhttps://www.bolzanor.eu/\nThis community is all about bringing together all kind of R users spread across the Autonomous Province of South Tyrol located in the Dolomitic regions the heart of the European Alps.We started the group in May 2019 as a cooperation between the Institutes for Earth Observation and Alpine Environment at EURAC Research. Recently we are trying to include also other R-users from other scientific institusions, the private sector and also the hobby R programmers\nThe group is no longer active!"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Giulio's Blog",
    "section": "",
    "text": "Here’s a list of projects I worked on. These can be coding, social or other kinds of projects\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nBolzanoR\n\n\nThe R community in the center of the Alps\n\n\n\n8/11/23\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMeteobrowser\n\n\nA Shiny App to download the meteorological time series from the Open Data - Province of Bozen\n\n\n\n8/6/23\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/apps/meteobrowser/index.html",
    "href": "projects/apps/meteobrowser/index.html",
    "title": "Meteobrowser",
    "section": "",
    "text": "MeteoBrowser UI\n\n\nAfter my master degree I started working as a researcher for eurac research. I was working on estimating water needs in apple orchards and I needed meteo data. The province of Bozen provided an API to access the data but no User Interface. So I decided to create one myself… that is how the MeteoBrowser came to life.\nMeteo Browser South Tyrol is a user-friendly web-based application that helps to visualize and download the hydro-meteorological time series freely available in South Tyrol, Italy. It is designed for a wide range of users, from common citizens to students as well as researchers, private companies and the public administration. Meteo Browser South Tyrol is a Shiny App inside an R package and can be used on a local machine or accessed on-line. Drop down menus allow the user to select hydro-meteorological station and measurements. A simple map shows where the monitoring stations are, the latest measurements available, and lets the user subset the selected stations geographically by drawing a polygon.\nThe application is hosted by eurac reasearch at the following addresshttp://meteobrowser.eurac.edu/\nA couple of years later Mattia Rossi and I, won the eurac open research award. Here’s an interview on the topic (in italian but translators work well on it) Mattia is the collegue that built the backend of the application\nThis paper contains short description of the software capabilities and usage:\nMeteo Browser South Tyrol: A Shiny App to download the meteorological time series from the Open Data Catalogue of the Province of Bolzano/Bozen - Italy"
  },
  {
    "objectID": "blog/posts/R/index.html",
    "href": "blog/posts/R/index.html",
    "title": "Solving terra’s “Cannot create raster from single x or y coordinate”",
    "section": "",
    "text": "In R if you want to convert a table (dataframe) having coordinates into a raster you can use the function rast from the {terra} package.\nUnfortunately if your dataframe has only one unique x or y coordinate you will get an error. This is because {terra} cannot infer the resolution of the raster.\nThe exact error you will get is:\nError: [rast] cannot create a raster geometry from a single x coordinate\nor Error: [rast] cannot create a raster geometry from a single y coordinate\nThis was asked on Stack Overflow in February 2023\nTo avoid this error I wrote a function named rast_singlecoord_safe that can be used just like rast\n\n\n\n\n\n\nWarning\n\n\n\nYou need to provide the resolution of the raster. The function assumes squared pixels\n\n\nHere’s the function with a working example:\nlibrary(terra)\nmydf &lt;- data.frame(x = 10, y = 10, value = 42)\n\nrast_singlecoord_safe &lt;- function(\n    x, resolution = NULL, type = \"xyz\", crs = \"\",\n    digits = 6, extent = NULL) {\n    if ((length(unique(x$x)) == 1) | (length(unique(x$y)) == 1)) {\n        if ( is.null(resolution)) {\n            stop(\"provide the resolution of the raster\")\n        }\n        additional_coords &lt;- data.frame(\n            x = min(unique(x$x), na.rm = TRUE) + resolution,\n            y = min(unique(x$y), na.rm = TRUE) + resolution\n        )\n        additional_coords[setdiff(names(x), names(additional_coords))] &lt;- NA\n        x &lt;- rbind(x, additional_coords)\n        rst &lt;- terra::rast(x,\n            type = type, crs = crs, digits = digits, extent=extent\n        )\n        rst &lt;- terra::trim(rst)\n    } else {\n        rst &lt;- terra::rast(x,\n            type = type, crs = crs, digits = digits, extent=extent\n        )\n    }\n    return(rst)\n}\n\nrast_singlecoord_safe(mydf,resolution = 100)"
  },
  {
    "objectID": "blog/posts/GEE/index.html",
    "href": "blog/posts/GEE/index.html",
    "title": "Reading Assets from Google Earth Engine with GDAL and R {terra}",
    "section": "",
    "text": "Intro and Aim\nGoogle Earth Engine (GEE) stores petabytes of Earth Observation data and more. The great aspect is that you can perform analyses directly in the cloud. This means that, in principle, you only need to extract your results (summary statistics, plots, final maps, etc.) from GEE. However, there are times when you want to conduct part of your analysis using your own system. For these instances, accessing (or downloading) raw or preprocessed data from GEE becomes necessary.\nRecently, XEE emerged as a potential game-changer. But there’s another, perhaps overlooked, method for accessing GEE data directly from your machine: using GDAL and any software built on it, like the R {terra} package.\nI was inspired by Andrew Brown’s blog post and decided to try it out myself.\n\n\nStack Requirements\nEnsure you have the following:\n\nGEE account (and a connected Google Cloud project, created with your GEE account)\nGDAL\nR and the {terra} package\n\n\n\nSetup\nFollow these steps to access GEE data from your machine:\n\nGo to https://console.cloud.google.com/\nSelect the cloud project you use with Google Earth Engine.\nNavigate to APIs and Services and enable the Google Earth Engine API.\nCreate a service account.\nGenerate a credentials .json file and save it on your machine.\n\n\n\nGDAL (on Linux)\nWith everything set up, we can access the data. GDAL, as a command-line tool, is both convenient and powerful.\nI chose the DEM Merit dataset for this example. It’s a single, global image with one band (“dem”), simplifying the process for demonstration purposes.\nFirst, I create an environment variable with the location of my credentials file.\nThen, I use gdalinfo on the dataset location, adding the “EEDAI:” prefix. This tells GDAL that the dataset is stored on Google Earth Engine and to use the appropriate protocol.\n\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gee/ee-credentials.json\"\ngdalinfo EEDAI:MERIT/DEM/v1_0_3\n\nDriver: EEDAI/Earth Engine Data API Image\nFiles: none associated\nSize is 432000, 174000\nCoordinate System is:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\nData axis to CRS axis mapping: 2,1\nOrigin = (-180.000416666666666,84.999583333333334)\nPixel Size = (0.000833333333333,-0.000833333333333)\nCorner Coordinates:\nUpper Left  (-180.0004167,  84.9995833) (180d 0' 1.50\"W, 84d59'58.50\"N)\nLower Left  (-180.0004167, -60.0004167) (180d 0' 1.50\"W, 60d 0' 1.50\"S)\nUpper Right ( 179.9995833,  84.9995833) (179d59'58.50\"E, 84d59'58.50\"N)\nLower Right ( 179.9995833, -60.0004167) (179d59'58.50\"E, 60d 0' 1.50\"S)\nCenter      (  -0.0004167,  12.4995833) (  0d 0' 1.50\"W, 12d29'58.50\"N)\nBand 1 Block=256x256 Type=Float32, ColorInterp=Undefined\n  Description = dem\n  Overviews: 216000x87000, 108000x43500, 54000x21750, 27000x10875, 13500x5437, 6750x2718, 3375x1359, 1687x679, 843x339, 421x169, 210x84\n\n\nWith this, you’ll get information about the dataset.\nOnce confirmed it’s working, you can use other GDAL tools like gdalwarp, gdal_translate, etc.\n\n\nR Terra\n{terra} uses GDAL to read raster data, meaning the same dataset can be read into R just as we did with GDAL.\nSimilar to the GDAL example, we set an environment variable for the credentials file and then read the dataset (with “EEDAI:”) using the rast() function.\n\nlibrary(terra)\n\nterra 1.7.37\n\nSys.setenv(GOOGLE_APPLICATION_CREDENTIALS=file.path(path.expand('~'),\"gee/ee-credentials.json\"))\n\nrst &lt;- rast(\"EEDAI:MERIT/DEM/v1_0_3\")\n\nNow, the asset can be accessed with all the functions available in {terra}. We can print the object and plot it. Plotting is fast, even for a global layer at 90 meters resolution, because terra only retrieves a sample of it, just enough to provide a clear image at the needed resolution.\n\nprint(rst)\n\nclass       : SpatRaster \ndimensions  : 174000, 432000, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nextent      : -180.0004, 179.9996, -60.00042, 84.99958  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : v1_0_3 \nname        : dem \n\nplot(rst, range=c(0,5000)) # wide range for global DEM\n\n\n\n\nNext, we select a spatial subset using the window() function by defining a bounding box.\n\nxmin = 28 # bounding box xmin\nxmax = 29 # bounding box xmax\nymin = -3 # bounding box ymin\nymax = -2 # bounding box ymax\n\nbb = ext(c(xmin, xmax, ymin, ymax))\nwindow(rst) &lt;- NULL\nwindow(rst) = bb\nprint(rst)\n\nclass       : SpatRaster \ndimensions  : 1200, 1200, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nwindow      : 28.00042, 29.00042, -2.999583, -1.999583  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : v1_0_3 \nname        : dem \n\n\nWe can now obtain summary statistics from the area with the summary() function.\n\nsummary(rst)\n\nWarning: [summary] used a sample\n\n\n      dem        \n Min.   : 641.1  \n 1st Qu.:1175.5  \n Median :1448.5  \n Mean   :1508.9  \n 3rd Qu.:1750.8  \n Max.   :3431.0  \n\n\nFinally, plot the area with an appropriate value range.\n\nplot(rst, range=c(650,3500))"
  },
  {
    "objectID": "blog/posts/GEE/old.index.html",
    "href": "blog/posts/GEE/old.index.html",
    "title": "Reading assets from Google Earth Engine with gdal and R {terra}",
    "section": "",
    "text": "Intro and aim\nGoogle Earth Engine (GEE) stores petabytes and petabytes of (not only) Earth Observation data. And the great thing is that you can run analysis directly in the cloud. This means that in principle the only thing you have to get out of GEE are your results (summary statistics, plots, final maps, etc.). But sometimes you want to run part of your analysis using your system and for this you will need to access (or download) raw or preprocessed data from GEE. Recently XEE came out and looks like a game changer. But there is yet another (maybe overlooked) way of accessing GEE data directly from your machine. And that is using gdal and any other software built on top of it (like the R {terra} package).\nI was inspired by this blog post by Andrew Brown, and decided to give it a try myself\n\n\nStack requirements\nMake sure you have the following:\n\nGEE account (and connected google cloud project, created when creating a GEE account)\ngdal\nR and the package {terra}\n\n\n\nSetup\nYou will need to go through the following steps in order to access GEE data from your machine. I am not adding screenshots or specific ways to do it as things may change in the future and there are always more than one way to do it. What you want to have at the end is a service account for the GEE API and generate the credentials to use it on your machine\n\nGo to https://console.cloud.google.com/\nSelect the cloud project you use with Google Earth Engine\nGo to APIs and Services and enable the Google Earth Engine API\nCreate a service account\nGenerate the credentials .json file and save it somewhere on your machine\n\n\n\nGdal (on linux)\nOnce everything is setup we can access the data. Gdal as a command line tool is quite convenient and powerful.\nAs dataset I choose to get the DEM Merit. This is a single, global, image with one band (“dem”), that makes it easier for example purposes.\nFirst I create and environment variable with the location of my credentials file.\nThen I run gdalinfo on the dataset location adding the “EEDAI:” prefix. This tells gdal that the dataset is stored on google earth engine and to use the appropriate protocol.\n\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gee/ee-credentials.json\"\ngdalinfo EEDAI:MERIT/DEM/v1_0_3\n\nDriver: EEDAI/Earth Engine Data API Image\nFiles: none associated\nSize is 432000, 174000\nCoordinate System is:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\nData axis to CRS axis mapping: 2,1\nOrigin = (-180.000416666666666,84.999583333333334)\nPixel Size = (0.000833333333333,-0.000833333333333)\nCorner Coordinates:\nUpper Left  (-180.0004167,  84.9995833) (180d 0' 1.50\"W, 84d59'58.50\"N)\nLower Left  (-180.0004167, -60.0004167) (180d 0' 1.50\"W, 60d 0' 1.50\"S)\nUpper Right ( 179.9995833,  84.9995833) (179d59'58.50\"E, 84d59'58.50\"N)\nLower Right ( 179.9995833, -60.0004167) (179d59'58.50\"E, 60d 0' 1.50\"S)\nCenter      (  -0.0004167,  12.4995833) (  0d 0' 1.50\"W, 12d29'58.50\"N)\nBand 1 Block=256x256 Type=Float32, ColorInterp=Undefined\n  Description = dem\n  Overviews: 216000x87000, 108000x43500, 54000x21750, 27000x10875, 13500x5437, 6750x2718, 3375x1359, 1687x679, 843x339, 421x169, 210x84\n\n\nAnd there you go you have the information about the dataset.\nOnce you know it is working you can use all the other gdal tools tile gdalwarp gdal_traslate etc.\n\n\nR terra\n{terra} uses gdal to read raster data. This means that the same dataset can be read into R just like we did with gdal.\nSimilarly to the example with gdal we set an environment variable that stores the credentials file and the we read the dataset (with EEDAI:) with the rast() function.\n\nlibrary(terra)\n\nterra 1.7.37\n\nSys.setenv(GOOGLE_APPLICATION_CREDENTIALS=file.path(path.expand('~'),\"gee/ee-credentials.json\"))\n\nrst &lt;- rast(\"EEDAI:MERIT/DEM/v1_0_3\")\n\nNow the asset can be accessed with all the functions available in {terra}. We can print the object and plot it. Plotting is fast even if it is a global layer at 90 meters resolution because terra only gets a sample of if, just enough to give a nice image at the resolution you need.\n\nprint(rst)\n\nclass       : SpatRaster \ndimensions  : 174000, 432000, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nextent      : -180.0004, 179.9996, -60.00042, 84.99958  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : v1_0_3 \nname        : dem \n\nplot(rst,range=c(0,5000)) # wide range for global DEM\n\n\n\n\nNow we select a spatial subset with the window() function by defining a bounding box\n\nxmin = 28 #bounding box xmin\nxmax = 29 #bounding box xmax\nymin = -3 #bounding box ymin\nymax = -2 #bounding box ymax\n\nbb=ext(c(xmin,xmax,ymin,ymax))\nwindow(rst) &lt;- NULL\nwindow(rst) = bb\nprint(rst)\n\nclass       : SpatRaster \ndimensions  : 1200, 1200, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nwindow      : 28.00042, 29.00042, -2.999583, -1.999583  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : v1_0_3 \nname        : dem \n\n\nWe can now get summary statistics from the area with the summary() function.\n\nsummary(rst)\n\nWarning: [summary] used a sample\n\n\n      dem        \n Min.   : 641.1  \n 1st Qu.:1175.5  \n Median :1448.5  \n Mean   :1508.9  \n 3rd Qu.:1750.8  \n Max.   :3431.0  \n\n\nAnd plot the area with an appropriate value range\n\nplot(rst,range=c(650,3500))"
  },
  {
    "objectID": "blog/secret.html",
    "href": "blog/secret.html",
    "title": "Giulio’s Blog",
    "section": "",
    "text": "This page is supposed to be secret!\n\n\n\nA listing of all my blog posts can be found here\n\n\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nReading Assets from Google Earth Engine with GDAL and R {terra}\n\n\n\n\n\n\n\nGEE\n\n\nGDAL\n\n\nR\n\n\nterra\n\n\n\n\nA guide on how to directly read assets from Google Earth Engine\n\n\n\n\n\n\n14/01/2024\n\n\nGiulio Genova\n\n\n\n\n\n\n  \n\n\n\n\nReading assets from Google Earth Engine with gdal and R {terra}\n\n\n\n\n\n\n\nGEE\n\n\ngdal\n\n\nR\n\n\nterra\n\n\n\n\nHow to read assets from Google Earth engine directly from\n\n\n\n\n\n\n14/01/2024\n\n\nGiulio Genova\n\n\n\n\n\n\n  \n\n\n\n\nSolving terra’s “Cannot create raster from single x or y coordinate”\n\n\n\n\n\n\n\nR\n\n\nterra\n\n\n\n\nYou cannot create single pixel SpatRast objects from dataframe. Here’s my way to solve it\n\n\n\n\n\n\n12/08/2023\n\n\nGiulio Genova\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Giulio's Blog",
    "section": "",
    "text": "Digital Soil Mapping Expert dealing with spatial modelling of soil properties, machine learning, High Performance Computing. As a PhD candidate in Mountain Environment and Agriculture at the University of Bozen/Bolzano in collaboration with Eurac research I was mainly interested in modelling the spatial distribution of soil properties, the role of trace metals in soil functioning, and water use efficiency in agriculture. I use a data science approach to answer scientific questions. I love open source software and open data.\nThis website is intended as a brain dump containing tips, tricks, news, projects, in the geospatial modelling and coding domain"
  },
  {
    "objectID": "index.html#get-in-touch",
    "href": "index.html#get-in-touch",
    "title": "Giulio's Blog",
    "section": "📨 Get In Touch",
    "text": "📨 Get In Touch\nEmail me at giulio.genova@proton.me if you’d like to chat!"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Have a look at my Google Scholar and ORCID, they are probably more reliable and up to date than the following list"
  },
  {
    "objectID": "publications.html#awards",
    "href": "publications.html#awards",
    "title": "Publications",
    "section": "Awards",
    "text": "Awards\nWell… I only got one but you never know.. better start a section!\n\nEarly Career - Open Research Award - Eurac researc\n\nInterview\nNomination"
  },
  {
    "objectID": "publications.html#papers",
    "href": "publications.html#papers",
    "title": "Publications",
    "section": "Papers",
    "text": "Papers\n\nCopper and zinc as a window to past agricultural land-use\nPhytoavailable phosphorus (P2O5) and potassium (K2O) in topsoil for apple orchards and vineyards, South Tyrol, Italy\nTopography of the Dolomites modulates range dynamics of narrow endemic plants under climate change"
  },
  {
    "objectID": "publications.html#conferences",
    "href": "publications.html#conferences",
    "title": "Publications",
    "section": "Conferences",
    "text": "Conferences"
  },
  {
    "objectID": "publications.html#talks",
    "href": "publications.html#talks",
    "title": "Publications",
    "section": "Talks",
    "text": "Talks\n\nSFScon19 - Giulio Genova - Meteo Browser South Tyrol"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Giulio's Blog",
    "section": "",
    "text": "This section lists blog entries, notes and miscellaneous items\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nReading Assets from Google Earth Engine with GDAL and R {terra}\n\n\nA guide on how to directly read assets from Google Earth Engine\n\n\n\n1/14/24\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReading assets from Google Earth Engine with gdal and R {terra}\n\n\nHow to read assets from Google Earth engine directly from\n\n\n\n1/14/24\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolving terra’s “Cannot create raster from single x or y coordinate”\n\n\nYou cannot create single pixel SpatRast objects from dataframe. Here’s my way to solve it\n\n\n\n8/12/23\n\n\n\n\n\n\n\n\nNo matching items"
  }
]